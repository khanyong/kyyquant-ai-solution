{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "KyyQuant AI Solution 프로젝트 초기 설정",
        "description": "React 18 + Vite + TypeScript 기반의 모던 웹 애플리케이션 프로젝트 초기 구성",
        "status": "done",
        "priority": "high",
        "complexity": 3,
        "dependencies": [],
        "details": "Vite 4.5 빌드 도구 설정, React 18.2 설치 및 구성, Hot Module Replacement (HMR) 설정, ESLint, Prettier 코드 품질 도구 구성",
        "testStrategy": "환경 설정 검증, 빌드 테스트, 배포 파이프라인 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "React + Vite 프로젝트 초기화",
            "description": "Vite 4.5 빌드 도구 설정, React 18.2 설치 및 구성, HMR 설정",
            "status": "done"
          },
          {
            "id": 2,
            "title": "TypeScript 설정",
            "description": "TypeScript 5.0 설치, tsconfig.json 구성 (strict mode), Path alias 설정",
            "status": "done"
          },
          {
            "id": 3,
            "title": "Material-UI 테마 설정",
            "description": "MUI v5.14 설치, 다크 테마 커스터마이징, Pretendard 폰트 적용",
            "status": "done"
          },
          {
            "id": 4,
            "title": "Redux Toolkit 상태관리 구성",
            "description": "Redux Toolkit 1.9 설치, Store 구조 설계, Redux DevTools 연동",
            "status": "done"
          },
          {
            "id": 5,
            "title": "라우팅 시스템 구축",
            "description": "React Router v6 설치, 중첩 라우팅 구조, Protected routes 구현",
            "status": "done"
          }
        ]
      },
      {
        "id": 2,
        "title": "데이터베이스 스키마 설계 및 구현",
        "description": "Supabase PostgreSQL 데이터베이스 설계 및 Row Level Security 구현",
        "status": "done",
        "priority": "high",
        "complexity": 4,
        "dependencies": [
          "1"
        ],
        "details": "사용자 관리, 전략 관리, 백테스팅 결과, 게시판 시스템, 투자 설정 테이블 설계 및 구현",
        "testStrategy": "스키마 검증, RLS 정책 테스트, 데이터 무결성 검증",
        "subtasks": [
          {
            "id": 1,
            "title": "사용자 관리 테이블",
            "description": "profiles, roles, user_permissions, user_settings 테이블 생성",
            "status": "done"
          },
          {
            "id": 2,
            "title": "전략 관리 테이블",
            "description": "strategies, strategy_conditions, strategy_indicators 테이블 생성",
            "status": "done"
          },
          {
            "id": 3,
            "title": "백테스팅 결과 테이블",
            "description": "backtest_results, backtest_trades, daily_returns 테이블 생성",
            "status": "done"
          },
          {
            "id": 4,
            "title": "게시판 시스템 테이블",
            "description": "boards, posts, comments, attachments 테이블 생성",
            "status": "done"
          },
          {
            "id": 5,
            "title": "투자 설정 테이블",
            "description": "investment_settings, universe_filters, portfolio_settings 테이블 생성",
            "status": "done"
          }
        ]
      },
      {
        "id": 3,
        "title": "Supabase 인증 시스템 구현",
        "description": "Supabase Auth를 활용한 완전한 인증/인가 시스템 구축",
        "status": "done",
        "priority": "high",
        "complexity": 3,
        "dependencies": [
          "2"
        ],
        "details": "OAuth 2.0 소셜 로그인, JWT 토큰 관리, 세션 자동 갱신, RBAC 권한 시스템 구현",
        "testStrategy": "인증 플로우 테스트, 권한 검증 테스트, 세션 관리 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "Supabase Auth 연동",
            "description": "Auth 클라이언트 초기화, JWT 토큰 관리, Auth 상태 전역 관리",
            "status": "done"
          },
          {
            "id": 2,
            "title": "로그인/회원가입 UI 구현",
            "description": "LoginDialog 컴포넌트, 유효성 검증, 이메일 인증 플로우",
            "status": "done"
          },
          {
            "id": 3,
            "title": "소셜 로그인 구현",
            "description": "Google OAuth 2.0, GitHub OAuth 연동, OAuth 콜백 처리",
            "status": "done"
          },
          {
            "id": 4,
            "title": "세션 관리 시스템",
            "description": "자동 로그인, 세션 만료 처리, Refresh token 자동 갱신",
            "status": "done"
          },
          {
            "id": 5,
            "title": "관리자 권한 시스템",
            "description": "RBAC 구현, Protected routes, 권한별 메뉴 표시/숨김",
            "status": "done"
          }
        ]
      },
      {
        "id": 4,
        "title": "전략 빌더 시스템 개발",
        "description": "드래그 앤 드롭 기반의 직관적인 투자 전략 구성 시스템",
        "status": "done",
        "priority": "high",
        "complexity": 5,
        "dependencies": [
          "2",
          "3"
        ],
        "details": "보조지표 선택, 조건 설정, 3단계 전략 시스템, 리스크 관리, 전략 저장/관리 구현",
        "testStrategy": "전략 생성 테스트, 지표 계산 검증, 조건 평가 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "보조지표 선택 UI",
            "description": "RSI, MACD, 볼린저밴드, 이동평균선, 일목균형표 등 지표 구현",
            "status": "done"
          },
          {
            "id": 2,
            "title": "조건 설정 인터페이스",
            "description": "AND/OR 로직 게이트, 중첩 조건 그룹, 비교 연산자 선택",
            "status": "done"
          },
          {
            "id": 3,
            "title": "3단계 전략 시스템",
            "description": "매수/매도 각 3단계 독립 평가, 단계별 최대 5개 지표 설정",
            "status": "done"
          },
          {
            "id": 4,
            "title": "리스크 관리 설정",
            "description": "손절매, 익절매, 트레일링 스톱, 포지션 크기 계산기",
            "status": "done"
          },
          {
            "id": 5,
            "title": "전략 저장/관리",
            "description": "Supabase 저장, 버전 관리, 전략 공유, JSON 내보내기/가져오기",
            "status": "done"
          }
        ]
      },
      {
        "id": 5,
        "title": "백테스팅 시스템 구현",
        "description": "과거 데이터 기반 전략 성과 검증 및 분석 시스템",
        "status": "done",
        "priority": "high",
        "complexity": 4,
        "dependencies": [
          "4"
        ],
        "details": "틱 데이터 시뮬레이션, 성과 분석 차트, 리스크 분석, 거래 분석, 섹터별 성과 분석",
        "testStrategy": "백테스트 정확도 검증, 성과 계산 테스트, 시뮬레이션 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "백테스팅 엔진",
            "description": "틱 데이터 시뮬레이션, 슬리피지 및 수수료 반영, 부분 체결",
            "status": "done"
          },
          {
            "id": 2,
            "title": "성과 분석 차트",
            "description": "Chart.js 기반 수익률 곡선, 누적 수익률, 드로우다운 차트",
            "status": "done"
          },
          {
            "id": 3,
            "title": "리스크 분석",
            "description": "샤프 지수, 소르티노 지수, 최대 낙폭, VaR, 변동성 분석",
            "status": "done"
          },
          {
            "id": 4,
            "title": "거래 분석",
            "description": "승률 및 손익비, 평균 보유기간, 거래 빈도, 종목별 성과",
            "status": "done"
          },
          {
            "id": 5,
            "title": "섹터별 성과",
            "description": "섹터 수익률 비교, 로테이션 분석, 상관관계 매트릭스",
            "status": "done"
          }
        ]
      },
      {
        "id": 6,
        "title": "커뮤니티 게시판 시스템",
        "description": "사용자 소통을 위한 다기능 게시판 시스템 구축",
        "status": "done",
        "priority": "high",
        "complexity": 3,
        "dependencies": [
          "3"
        ],
        "details": "게시판 구조 설계, 게시글 기능, 댓글 시스템, 상호작용 기능, 권한 관리",
        "testStrategy": "게시판 CRUD 테스트, 권한 테스트, 댓글 시스템 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "게시판 구조 설계",
            "description": "공지사항, 자유게시판, Q&A, 전략 공유, 시장 분석 게시판",
            "status": "done"
          },
          {
            "id": 2,
            "title": "게시글 기능",
            "description": "WYSIWYG 에디터, 이미지/파일 첨부, 마크다운 지원",
            "status": "done"
          },
          {
            "id": 3,
            "title": "댓글 시스템",
            "description": "댓글 및 대댓글 구조, 실시간 업데이트, 댓글 알림",
            "status": "done"
          },
          {
            "id": 4,
            "title": "상호작용 기능",
            "description": "좋아요/싫어요, 조회수, 북마크, 게시글 공유, 신고",
            "status": "done"
          },
          {
            "id": 5,
            "title": "권한 관리",
            "description": "게시판별 읽기/쓰기 권한, 역할 기반 접근 제어, 스팸 방지",
            "status": "done"
          }
        ]
      },
      {
        "id": 7,
        "title": "투자 설정 시스템",
        "description": "개인화된 투자 전략 설정 및 관리 시스템",
        "status": "done",
        "priority": "high",
        "complexity": 3,
        "dependencies": [
          "4"
        ],
        "details": "투자 유니버스 설정, 포트폴리오 관리, 매매 조건, 위험 관리, 업종/테마 설정",
        "testStrategy": "필터링 로직 테스트, 포트폴리오 계산 테스트, 리스크 관리 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "투자 유니버스 설정",
            "description": "시가총액, PER/PBR/ROE, 부채비율, 거래량 필터링",
            "status": "done"
          },
          {
            "id": 2,
            "title": "포트폴리오 관리",
            "description": "종목 수 제한, 비중 제한, 현금 비율, 리밸런싱 주기",
            "status": "done"
          },
          {
            "id": 3,
            "title": "매매 조건 설정",
            "description": "진입/청산 조건, 분할 매수/매도, 평균 단가 관리",
            "status": "done"
          },
          {
            "id": 4,
            "title": "위험 관리",
            "description": "손실 한도 설정, 변동성 기반 포지션 조절, 시스템 CUT",
            "status": "done"
          },
          {
            "id": 5,
            "title": "업종/테마 설정",
            "description": "선호/제외 업종, 테마주 필터링, 업종 순환 전략",
            "status": "done"
          }
        ]
      },
      {
        "id": 8,
        "title": "실시간 대시보드 개발",
        "description": "실시간 시장 데이터 및 포트폴리오 모니터링 대시보드",
        "status": "done",
        "priority": "high",
        "complexity": 4,
        "dependencies": [
          "5",
          "7"
        ],
        "details": "시장 개요 위젯, 포트폴리오 현황, 실시간 WebSocket, 실시간 차트, 주문 패널",
        "testStrategy": "실시간 데이터 테스트, WebSocket 연결 테스트, 차트 렌더링 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "시장 개요 위젯",
            "description": "KOSPI/KOSDAQ 지수, 업종 지수, 거래량/거래대금 추이",
            "status": "done"
          },
          {
            "id": 2,
            "title": "포트폴리오 현황",
            "description": "보유 종목 시세, 평가 손익, 수익률 차트, 종목별 비중",
            "status": "done"
          },
          {
            "id": 3,
            "title": "실시간 시세 WebSocket",
            "description": "WebSocket 연결 관리, 호가 수신, 체결 데이터 스트리밍",
            "status": "done"
          },
          {
            "id": 4,
            "title": "실시간 차트",
            "description": "분봉/일봉 업데이트, TradingView 차트, 기술적 지표",
            "status": "done"
          },
          {
            "id": 5,
            "title": "주문 패널",
            "description": "원클릭 주문, 예약 주문, 주문 체결 알림, 미체결 관리",
            "status": "done"
          }
        ]
      },
      {
        "id": 9,
        "title": "자동매매 시스템",
        "description": "키움 OpenAPI 연동 자동매매 시스템 구축",
        "status": "done",
        "priority": "high",
        "complexity": 5,
        "dependencies": [
          "8"
        ],
        "details": "자동매매 UI, 전략 실행 컨트롤, 키움 API 서버, 실시간 주문 실행, 포지션 모니터링",
        "testStrategy": "자동매매 시뮬레이션, API 연동 테스트, 주문 실행 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "자동매매 UI",
            "description": "전략 선택, ON/OFF 토글, 실행 모니터링, 매매 로그",
            "status": "done"
          },
          {
            "id": 2,
            "title": "전략 실행 컨트롤",
            "description": "시작/중지/일시정지, 긴급 정지, 자금 할당, 우선순위",
            "status": "done"
          },
          {
            "id": 3,
            "title": "키움 API 서버",
            "description": "Python FastAPI 서버, OpenAPI 연동, COM 객체 관리",
            "status": "done"
          },
          {
            "id": 4,
            "title": "실시간 주문 실행",
            "description": "자동 주문, 체결 확인, 부분 체결 처리, 재시도 로직",
            "status": "done"
          },
          {
            "id": 5,
            "title": "포지션 모니터링",
            "description": "실시간 추적, 손익 계산, 리스크 모니터링, 일일 정산",
            "status": "done"
          }
        ]
      },
      {
        "id": 10,
        "title": "Supabase 데이터 파이프라인 구축",
        "description": "키움 OpenAPI → Supabase 완전 자동화 데이터 흐름 구축",
        "status": "done",
        "priority": "high",
        "complexity": 4,
        "dependencies": [
          "9"
        ],
        "details": "데이터베이스 스키마 재구성, 데이터 흐름 테스트, 백엔드 파일 구조 정리",
        "testStrategy": "데이터 파이프라인 테스트, 데이터 무결성 검증, 성능 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "데이터베이스 스키마 재구성",
            "description": "positions, account_balance 테이블 재생성, RLS 정책 수정",
            "status": "done"
          },
          {
            "id": 2,
            "title": "데이터 흐름 테스트 시스템",
            "description": "7단계 데이터 파이프라인 테스트, 모든 테이블 저장 검증",
            "status": "done"
          },
          {
            "id": 3,
            "title": "백엔드 파일 구조 정리",
            "description": "api/, core/, database/, scripts/, sql/ 폴더 구조화",
            "status": "done"
          }
        ]
      },
      {
        "id": 11,
        "title": "n8n 워크플로우 시스템 구축",
        "description": "n8n 기반 자동매매 워크플로우 아키텍처 설계",
        "status": "done",
        "priority": "high",
        "complexity": 3,
        "dependencies": [
          "10"
        ],
        "details": "n8n 연동 시스템, Supabase 모니터링 워크플로우, 자동매매 스케줄러",
        "testStrategy": "워크플로우 테스트, 스케줄러 테스트, 연동 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "n8n 연동 시스템",
            "description": "n8n_connector.py 구현, NAS 서버 연결 구조",
            "status": "done"
          },
          {
            "id": 2,
            "title": "Supabase 모니터링 워크플로우",
            "description": "1분마다 활성 전략 체크, 매매 신호 생성, 결과 저장",
            "status": "done"
          },
          {
            "id": 3,
            "title": "자동매매 스케줄러",
            "description": "APScheduler 기반, 장 시간 자동 체크, 전략별 실행 주기",
            "status": "done"
          }
        ]
      },
      {
        "id": 12,
        "title": "시스템 아키텍처 문서화",
        "description": "전체 시스템 구조 및 데이터 흐름 문서화",
        "status": "done",
        "priority": "medium",
        "complexity": 2,
        "dependencies": [
          "11"
        ],
        "details": "시스템 구성 요소 설명, 데이터 흐름 다이어그램, 프로세스 문서화",
        "testStrategy": "문서 검토, 다이어그램 검증",
        "subtasks": [
          {
            "id": 1,
            "title": "SYSTEM_ARCHITECTURE.md",
            "description": "시스템 구성, 데이터 흐름, 6단계 프로세스 문서화",
            "status": "done"
          },
          {
            "id": 2,
            "title": "backend/README.md",
            "description": "폴더 구조, 모듈 역할, API/Core/Database 설명",
            "status": "done"
          }
        ]
      },
      {
        "id": 13,
        "title": "투자 유니버스 필터링 시스템",
        "description": "3,349개 한국 주식 데이터 수집 및 실시간 필터링 시스템 구축",
        "status": "done",
        "priority": "high",
        "complexity": 4,
        "dependencies": [
          "7"
        ],
        "details": "키움 OpenAPI 데이터 수집, 한글 인코딩 문제 해결, Supabase 페이지네이션, 누적 필터링 로직, UI/UX 최적화",
        "testStrategy": "데이터 수집 테스트, 필터링 로직 검증, 성능 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "키움 OpenAPI 데이터 수집",
            "description": "3,349개 한국 주식 수집, ETF/SPAC/REIT 필터링, 재무지표 수집",
            "status": "done"
          },
          {
            "id": 2,
            "title": "한글 인코딩 문제 해결",
            "description": "CP949 → UTF-8 변환, 중복 레코드 제거, 데이터 정합성 검증",
            "status": "done"
          },
          {
            "id": 3,
            "title": "Supabase 페이지네이션 구현",
            "description": "1,000개 제한 우회, 다중 페이지 순차 로드, 인덱싱 최적화",
            "status": "done"
          },
          {
            "id": 4,
            "title": "누적 필터링 로직",
            "description": "3단계 필터 체인, 가치평가→재무지표→섹터 필터, 실시간 통계",
            "status": "done"
          },
          {
            "id": 5,
            "title": "UI/UX 최적화",
            "description": "TradingSettingsWithUniverse 컴포넌트, 시각적 플로우, 필터 초기화",
            "status": "done"
          }
        ]
      },
      {
        "id": 14,
        "title": "백테스트 필터링 시스템",
        "description": "백테스트 시스템과 통합된 고급 필터링 전략 시스템 구축",
        "status": "done",
        "priority": "high",
        "complexity": 4,
        "dependencies": [
          "13"
        ],
        "details": "필터링 전략 컴포넌트, 투자자 동향 필터, 필터 저장/불러오기, 백테스트 통합, 결과 목록",
        "testStrategy": "필터링 전략 테스트, 백테스트 통합 테스트, 데이터 로딩 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "필터링 전략 컴포넌트",
            "description": "5가지 필터링 모드, 동적 리밸런싱, 필터 우선순위 관리",
            "status": "done"
          },
          {
            "id": 2,
            "title": "투자자 동향 필터",
            "description": "외국인/기관 보유비율, 순매수 금액, 연속 매수일 분석",
            "status": "done"
          },
          {
            "id": 3,
            "title": "필터 저장/불러오기",
            "description": "SaveFilterDialog, LoadFilterDialog, 로컬/클라우드 저장",
            "status": "done"
          },
          {
            "id": 4,
            "title": "백테스트 통합",
            "description": "BacktestRunner 통합, 사전 필터링 종목 로드, 3-tier 데이터",
            "status": "done"
          },
          {
            "id": 5,
            "title": "백테스트 결과 목록",
            "description": "BacktestResultsList 컴포넌트, 결과 검색/필터링, 성과 시각화",
            "status": "done"
          }
        ]
      },
      {
        "id": 15,
        "title": "전략 관리 시스템 개선",
        "description": "전략 불러오기 기능 개선 및 조건 조합 시각화",
        "status": "done",
        "priority": "high",
        "complexity": 3,
        "dependencies": [
          "4"
        ],
        "details": "StrategyLoader 컴포넌트, 조건 조합 시각화, 공개/비공개 기능, 검색/정렬, 디버깅",
        "testStrategy": "전략 로더 테스트, 검색/정렬 테스트, UI 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "전략 로더 컴포넌트 개발",
            "description": "카드 기반 UI, 통계 정보 표시, 백테스트 결과 통합",
            "status": "done"
          },
          {
            "id": 2,
            "title": "전략 조건 조합 시각화",
            "description": "지표명 한글화, 매수/매도 조건 표시, 단계별 플로우",
            "status": "done"
          },
          {
            "id": 3,
            "title": "공개/비공개 전략 기능",
            "description": "is_public 필드, RLS 정책, 전략 공유 다이얼로그",
            "status": "done"
          },
          {
            "id": 4,
            "title": "검색 및 정렬 기능",
            "description": "실시간 검색, 이름/날짜 정렬, 탭 기반 필터링",
            "status": "done"
          },
          {
            "id": 5,
            "title": "디버깅 및 오류 수정",
            "description": "불러오기 버튼 동작 수정, TypeScript 타입 오류 수정",
            "status": "done"
          }
        ]
      },
      {
        "id": 16,
        "title": "빌드 최적화 및 배포 개선",
        "description": "Vite 빌드 최적화 및 배포 환경 오류 해결",
        "status": "done",
        "priority": "high",
        "complexity": 3,
        "dependencies": [
          "1"
        ],
        "details": "청크 분할 최적화, 빌드 설정 개선, 배포 오류 해결, 프로젝트 문서 정리",
        "testStrategy": "빌드 테스트, 배포 테스트, 성능 측정",
        "subtasks": [
          {
            "id": 1,
            "title": "청크 분할 최적화",
            "description": "단일 번들 1.36MB → 5개 청크 분할, vendor 분리",
            "status": "done"
          },
          {
            "id": 2,
            "title": "빌드 설정 개선",
            "description": "vite.config.ts manualChunks, terser → esbuild, Gzip 압축",
            "status": "done"
          },
          {
            "id": 3,
            "title": "배포 오류 해결",
            "description": "MUI vendor 순환 의존성 해결, Vercel 자동 배포 연동",
            "status": "done"
          },
          {
            "id": 4,
            "title": "프로젝트 문서 정리",
            "description": "DOCUMENTATION_STRUCTURE.md, PROJECT_OVERVIEW.md 작성",
            "status": "done"
          }
        ]
      },
      {
        "id": 17,
        "title": "백테스트 엔진 고도화",
        "description": "멀티 종목 백테스트 및 고급 전략 분석 시스템 구축",
        "status": "done",
        "priority": "high",
        "complexity": 5,
        "dependencies": [
          "5",
          "14"
        ],
        "details": "고급 백테스트 엔진, 기술적 지표 라이브러리, 전략 분석 모듈, 분석 UI, API 개선",
        "testStrategy": "백테스트 정확도 검증, 지표 계산 테스트, 성능 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "고급 백테스트 엔진 개발",
            "description": "backtest_engine_advanced.py, 멀티 종목, 분할 매수/매도",
            "status": "done"
          },
          {
            "id": 2,
            "title": "완전한 기술적 지표 라이브러리",
            "description": "indicators_complete.py, RSI/MACD/볼린저밴드, 일목균형표",
            "status": "done"
          },
          {
            "id": 3,
            "title": "전략 분석 모듈",
            "description": "strategy_analyzer.py, 매매 신호 생성, AND/OR 평가",
            "status": "done"
          },
          {
            "id": 4,
            "title": "전략 분석 UI 컴포넌트",
            "description": "StrategyAnalyzer.tsx, 로직 해석, 최적화 제안",
            "status": "done"
          },
          {
            "id": 5,
            "title": "백테스트 API 개선",
            "description": "실제 주가 연동, 복수 종목, 성과 지표 계산",
            "status": "done"
          }
        ]
      },
      {
        "id": 18,
        "title": "키움 REST API 통합 및 전체 종목 데이터 시스템",
        "description": "키움증권 REST API 연동 및 전체 한국 주식 데이터 다운로드 시스템 구축",
        "status": "done",
        "priority": "high",
        "complexity": 5,
        "dependencies": [
          "9"
        ],
        "details": "키움 REST API 토큰 발급, NAS Bridge Server, 전체 종목 수집, 하이브리드 시세 조회, 데이터 파이프라인",
        "testStrategy": "API 연동 테스트, 데이터 수집 테스트, 시세 조회 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "키움 REST API 토큰 발급 성공",
            "description": "OAuth 2.0 구현, mockapi.kiwoom.com 연동, Access Token 발급",
            "status": "done"
          },
          {
            "id": 2,
            "title": "NAS REST API Bridge Server 구축",
            "description": "Synology Docker, FastAPI 서버, kiwoom_bridge/main.py",
            "status": "done"
          },
          {
            "id": 3,
            "title": "전체 주식 데이터 수집 시스템",
            "description": "pykrx로 2,878개 종목 수집, stock_metadata 테이블 저장",
            "status": "done"
          },
          {
            "id": 4,
            "title": "하이브리드 시세 조회 시스템",
            "description": "키움 API 500 에러 우회, pykrx 백업, 응답 형식 통일",
            "status": "done"
          },
          {
            "id": 5,
            "title": "데이터 파이프라인 완성",
            "description": "fetch_all_stocks_batch.py, download_all_stocks_data.py",
            "status": "done"
          }
        ]
      },
      {
        "id": 19,
        "title": "목표수익률 단계별 매도 시스템",
        "description": "다단계 목표수익률 설정 및 부분 매도 전략 시스템 구축",
        "status": "done",
        "priority": "high",
        "complexity": 4,
        "dependencies": [
          "4",
          "5"
        ],
        "details": "단계별 목표수익률 매도, 동적 손절 조정, 단계별 AND/OR 결합, UI/UX 개선, 테스트 및 배포",
        "testStrategy": "단계별 매도 로직 테스트, 동적 손절 테스트, UI 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "단계별 목표수익률 매도 기능",
            "description": "단순/단계별 모드, 3단계 부분 매도 (50%, 30%, 20%)",
            "status": "done"
          },
          {
            "id": 2,
            "title": "동적 손절 조정 기능 (Break Even Stop)",
            "description": "단계별 손절 상향 조정, UI 라벨링 개선",
            "status": "done"
          },
          {
            "id": 3,
            "title": "단계별 AND/OR 결합 로직",
            "description": "각 단계 독립적 결합 방식, ToggleButtonGroup UI",
            "status": "done"
          },
          {
            "id": 4,
            "title": "UI/UX 개선 및 버그 수정",
            "description": "3단계 전략 UI 버그 수정, TypeScript 타입 오류 해결",
            "status": "done"
          },
          {
            "id": 5,
            "title": "테스트 및 배포",
            "description": "test_staged_profit.py 작성, NAS 업로드, 브랜치 병합",
            "status": "done"
          }
        ]
      },
      {
        "id": 20,
        "title": "n8n 워크플로우 자동매매 연동",
        "description": "n8n 기반 자동매매 워크플로우 실제 구현",
        "status": "in-progress",
        "priority": "high",
        "complexity": 4,
        "dependencies": [
          "11",
          "18"
        ],
        "details": "n8n 서버 설정, 실시간 전략 모니터링, 자동 주문 실행",
        "testStrategy": "워크플로우 테스트, 자동매매 시뮬레이션, 주문 실행 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "n8n 서버 설정",
            "description": "NAS Docker 컨테이너, Webhook 엔드포인트, Supabase 연동",
            "status": "in-progress"
          },
          {
            "id": 2,
            "title": "실시간 전략 모니터링",
            "description": "활성 전략 체크, 매매 신호 생성, 신호 강도 계산",
            "status": "pending"
          },
          {
            "id": 3,
            "title": "자동 주문 실행",
            "description": "매수/매도 자동화, 체결 확인, 포지션 업데이트",
            "status": "pending"
          }
        ]
      },
      {
        "id": 21,
        "title": "성과 분석 대시보드",
        "description": "투자 성과 종합 분석 및 리포팅 시스템",
        "status": "pending",
        "priority": "medium",
        "complexity": 4,
        "dependencies": [
          "8",
          "17"
        ],
        "details": "수익률 분석, 포트폴리오 분석, 벤치마크 비교, 리스크 모니터링, 리포트 생성",
        "testStrategy": "성과 계산 검증, 차트 렌더링 테스트, 리포트 생성 테스트",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "AI 포트폴리오 최적화",
        "description": "머신러닝 기반 포트폴리오 최적화 시스템",
        "status": "pending",
        "priority": "medium",
        "complexity": 5,
        "dependencies": [
          "21"
        ],
        "details": "ML 모델 개발, 포트폴리오 최적화, 리밸런싱 자동화, AI 추천 시스템, 백테스팅 검증",
        "testStrategy": "ML 모델 검증, 최적화 알고리즘 테스트, 백테스팅 검증",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "알림 시스템",
        "description": "다채널 알림 및 커뮤니케이션 시스템",
        "status": "pending",
        "priority": "medium",
        "complexity": 3,
        "dependencies": [
          "20"
        ],
        "details": "이메일 알림, 텔레그램 봇, 푸시 알림, 알림 설정, 알림 관리",
        "testStrategy": "알림 전송 테스트, 채널별 테스트, 알림 관리 테스트",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "모바일 반응형 UI",
        "description": "모바일 최적화 및 PWA 구현",
        "status": "pending",
        "priority": "low",
        "complexity": 3,
        "dependencies": [
          "8"
        ],
        "details": "반응형 레이아웃, 모바일 최적화, PWA 구현, 모바일 전용 기능, 성능 최적화",
        "testStrategy": "반응형 테스트, PWA 테스트, 성능 측정",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "테스트 및 최적화",
        "description": "품질 보증 및 성능 최적화",
        "status": "pending",
        "priority": "low",
        "complexity": 3,
        "dependencies": [
          "24"
        ],
        "details": "단위 테스트, 통합 테스트, 성능 최적화, 보안 점검, 접근성 개선",
        "testStrategy": "전체 테스트 커버리지, 성능 벤치마크, 보안 감사",
        "subtasks": []
      },
      {
        "id": 26,
        "title": "문서화 및 배포",
        "description": "프로젝트 문서화 및 프로덕션 배포",
        "status": "pending",
        "priority": "low",
        "complexity": 2,
        "dependencies": [
          "25"
        ],
        "details": "API 문서화, 사용자 가이드, 개발자 문서, Vercel 배포, 모니터링 설정",
        "testStrategy": "문서 검토, 배포 프로세스 테스트, 모니터링 검증",
        "subtasks": []
      }
    ],
    "metadata": {
      "lastUpdated": "2025-10-01T00:00:00.000000",
      "totalTasks": 27,
      "completedTasks": 20,
      "inProgressTasks": 1,
      "pendingTasks": 6,
      "progress": 77,
      "projectName": "KyyQuant AI Solution",
      "description": "React + TypeScript + Vite 기반 자동매매 시스템",
      "note": "최신 로드맵은 MASTER_ROADMAP.md를 참조하세요"
    }
  }
}