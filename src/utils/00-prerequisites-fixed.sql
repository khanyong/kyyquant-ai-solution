-- ÌïÑÏàò ÏÇ¨Ï†Ñ ÏöîÍµ¨ÏÇ¨Ìï≠ Î∞è Í≥µÌÜµ Ìï®ÏàòÎì§
-- Ïù¥ ÌååÏùºÏùÑ Í∞ÄÏû• Î®ºÏ†Ä Ïã§ÌñâÌïòÏÑ∏Ïöî!

-- 1. ÌïÑÏöîÌïú ÌôïÏû• Í∏∞Îä• ÌôúÏÑ±Ìôî (Supabase ÎåÄÏãúÎ≥¥ÎìúÏóêÏÑú ÌôúÏÑ±Ìôî ÌïÑÏöî)
-- - uuid-ossp (UUID ÏÉùÏÑ±) - Î≥¥ÌÜµ Í∏∞Î≥∏ ÌôúÏÑ±Ìôî
-- - pgsodium (ÏïîÌò∏Ìôî) - ÎåÄÏãúÎ≥¥ÎìúÏóêÏÑú ÌôúÏÑ±Ìôî ÌïÑÏöî

-- 2. updated_at ÏûêÎèô ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
CREATE OR REPLACE FUNCTION update_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 3. ÌòÑÏû¨ ÏÇ¨Ïö©Ïûê ID Í∞ÄÏ†∏Ïò§Í∏∞ (auth.uid() ÎåÄÏã† ÏÇ¨Ïö©)
-- SupabaseÎäî Ïù¥ÎØ∏ auth.uid() Ìï®ÏàòÎ•º Ï†úÍ≥µÌïòÎØÄÎ°ú ÏÉàÎ°ú ÎßåÎì§ ÌïÑÏöî ÏóÜÏùå
-- ÎåÄÏã† public Ïä§ÌÇ§ÎßàÏóê wrapper Ìï®Ïàò ÏÉùÏÑ±
CREATE OR REPLACE FUNCTION get_current_user_id()
RETURNS UUID AS $$
  SELECT auth.uid()
$$ LANGUAGE sql STABLE;

-- 4. ÏÇ¨Ïö©Ïûê Ïó≠Ìï† ÌôïÏù∏ Ìï®Ïàò
CREATE OR REPLACE FUNCTION is_admin(user_id UUID)
RETURNS BOOLEAN AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM profiles 
    WHERE id = user_id 
    AND (role = 'admin' OR is_admin = true)
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 5. ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÍ∞Ä Í¥ÄÎ¶¨ÏûêÏù∏ÏßÄ ÌôïÏù∏
CREATE OR REPLACE FUNCTION is_current_user_admin()
RETURNS BOOLEAN AS $$
BEGIN
  RETURN is_admin(auth.uid());
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 6. ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ìè¨Îß∑ Ìï®Ïàò
CREATE OR REPLACE FUNCTION format_timestamp(ts TIMESTAMP WITH TIME ZONE)
RETURNS TEXT AS $$
BEGIN
  RETURN to_char(ts AT TIME ZONE 'Asia/Seoul', 'YYYY-MM-DD HH24:MI:SS');
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- 7. ÏïàÏ†ÑÌïú JSON Ï∂îÏ∂ú Ìï®Ïàò
CREATE OR REPLACE FUNCTION safe_json_extract(
  json_data JSONB,
  path TEXT,
  default_value TEXT DEFAULT NULL
)
RETURNS TEXT AS $$
BEGIN
  RETURN COALESCE(json_data ->> path, default_value);
EXCEPTION
  WHEN OTHERS THEN
    RETURN default_value;
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- 8. Î∞∞Ïó¥ Ï§ëÎ≥µ Ï†úÍ±∞ Ìï®Ïàò
CREATE OR REPLACE FUNCTION array_unique(arr ANYARRAY)
RETURNS ANYARRAY AS $$
  SELECT ARRAY(SELECT DISTINCT unnest(arr))
$$ LANGUAGE sql IMMUTABLE;

-- 9. ÌçºÏÑºÌä∏ Í≥ÑÏÇ∞ Ìï®Ïàò
CREATE OR REPLACE FUNCTION calculate_percentage(
  value NUMERIC,
  total NUMERIC,
  decimal_places INTEGER DEFAULT 2
)
RETURNS NUMERIC AS $$
BEGIN
  IF total = 0 OR total IS NULL THEN
    RETURN 0;
  END IF;
  RETURN ROUND((value / total) * 100, decimal_places);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- 10. ÏàòÏùµÎ•† Í≥ÑÏÇ∞ Ìï®Ïàò
CREATE OR REPLACE FUNCTION calculate_return_rate(
  initial_value NUMERIC,
  final_value NUMERIC,
  decimal_places INTEGER DEFAULT 2
)
RETURNS NUMERIC AS $$
BEGIN
  IF initial_value = 0 OR initial_value IS NULL THEN
    RETURN 0;
  END IF;
  RETURN ROUND(((final_value - initial_value) / initial_value) * 100, decimal_places);
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- 11. Ïù¥Î©îÏùº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Ìï®Ïàò
CREATE OR REPLACE FUNCTION is_valid_email(email TEXT)
RETURNS BOOLEAN AS $$
BEGIN
  RETURN email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$';
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- 12. Ï†ÑÌôîÎ≤àÌò∏ Ìè¨Îß∑ Ìï®Ïàò (ÌïúÍµ≠)
CREATE OR REPLACE FUNCTION format_phone_number(phone TEXT)
RETURNS TEXT AS $$
DECLARE
  cleaned TEXT;
BEGIN
  -- Ïà´ÏûêÎßå Ï∂îÏ∂ú
  cleaned := regexp_replace(phone, '[^0-9]', '', 'g');
  
  -- ÌïúÍµ≠ Ï†ÑÌôîÎ≤àÌò∏ Ìè¨Îß∑
  IF length(cleaned) = 11 THEN
    -- 010-1234-5678
    RETURN substr(cleaned, 1, 3) || '-' || 
           substr(cleaned, 4, 4) || '-' || 
           substr(cleaned, 8, 4);
  ELSIF length(cleaned) = 10 THEN
    -- 02-1234-5678 or 031-123-4567
    IF substr(cleaned, 1, 2) = '02' THEN
      RETURN substr(cleaned, 1, 2) || '-' || 
             substr(cleaned, 3, 4) || '-' || 
             substr(cleaned, 7, 4);
    ELSE
      RETURN substr(cleaned, 1, 3) || '-' || 
             substr(cleaned, 4, 3) || '-' || 
             substr(cleaned, 7, 4);
    END IF;
  ELSE
    RETURN phone;
  END IF;
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- 13. UUID Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
CREATE OR REPLACE FUNCTION is_valid_uuid(input TEXT)
RETURNS BOOLEAN AS $$
BEGIN
  PERFORM input::UUID;
  RETURN TRUE;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- 14. ÏïàÏ†ÑÌïú Ïà´Ïûê Î≥ÄÌôò
CREATE OR REPLACE FUNCTION safe_to_numeric(
  input TEXT,
  default_value NUMERIC DEFAULT 0
)
RETURNS NUMERIC AS $$
BEGIN
  RETURN input::NUMERIC;
EXCEPTION
  WHEN OTHERS THEN
    RETURN default_value;
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- 15. ÏûëÏóÖÏùº Í≥ÑÏÇ∞ Ìï®Ïàò (Ï£ºÎßê Ï†úÏô∏)
CREATE OR REPLACE FUNCTION add_business_days(
  start_date DATE,
  days_to_add INTEGER
)
RETURNS DATE AS $$
DECLARE
  work_date DATE := start_date;
  days_added INTEGER := 0;
BEGIN
  WHILE days_added < days_to_add LOOP
    work_date := work_date + 1;
    -- Ï£ºÎßêÏù¥ ÏïÑÎãå Í≤ΩÏö∞Îßå Ïπ¥Ïö¥Ìä∏
    IF EXTRACT(DOW FROM work_date) NOT IN (0, 6) THEN
      days_added := days_added + 1;
    END IF;
  END LOOP;
  RETURN work_date;
END;
$$ LANGUAGE plpgsql IMMUTABLE;

-- ÏôÑÎ£å Î©îÏãúÏßÄ
DO $$
BEGIN
  RAISE NOTICE '‚úÖ Prerequisites and common functions created successfully!';
  RAISE NOTICE 'üìå Note: Using Supabase built-in auth.uid() function';
  RAISE NOTICE 'üìå Make sure pgsodium extension is enabled for encryption features';
END $$;